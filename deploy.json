{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      },
      "deploymentName": {
        "type": "string",
        "defaultValue": "duckbot",
        "metadata": {
          "description": "Container group name"
        }
      },
      "botserviceskuname": {
          "type": "string",
          "defaultValue": "B1",
          "metadata": {
              "description": "The SKU Name of App Service Plan for the discord bot"
          }
      },
      "botservicesku": {
          "type": "string",
          "defaultValue": "Basic",
          "metadata": {
              "description": "The SKU of App Service Plan for the discord bot"
          }
      },
      "discordBotToken": {
          "type": "securestring"
      },
      "dockerRegistryUrl": {
          "type": "string",
          "defaultValue": "https://index.docker.io"
      },
      "dockerRegistryUsername" :{
          "type": "string",
          "defaultValue": ""
      },
      "dockerRegistryPassword" :{
          "type": "string",
          "defaultValue": ""
      },
      "image": {
        "type": "string",
        "metadata": {
          "description": "Container image to deploy. Should be of the form accountName/imagename:tag for images stored in Docker Hub or a fully qualified URI for a private registry like the Azure Container Registry."
        },
        "defaultValue": "rowdychildren/duckbot3"
      }
    },
    "resources": [
          {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[concat( parameters('deploymentName'), uniqueString(resourceGroup().id) )]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {},
      "resources": [
        {
          "name": "default/points",
          "type": "tableServices/tables",
          "apiVersion": "2019-06-01",
          "dependsOn": [
            "[concat( parameters('deploymentName'), uniqueString(resourceGroup().id) )]"
          ]
        },
        {
          "name": "default/members",
          "type": "tableServices/tables",
          "apiVersion": "2019-06-01",
          "dependsOn": [
            "[concat( parameters('deploymentName'), uniqueString(resourceGroup().id) )]"
          ]
        }
      ]
    },
    {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Web/serverfarms",
            "kind": "linux",
            "name": "[concat(concat(parameters('deploymentName'),'discord'), uniqueString(resourceGroup().id))]",
            "location": "[parameters('location')]",
            "comments": "App Service Plan used for the discord bot",
            "properties": {
                "name": "[concat(concat(parameters('deploymentName'),'discord'), uniqueString(resourceGroup().id))]",
                "workerSize": "0",
                "workerSizeId": "0",
                "numberOfWorkers": "1",
                "reserved": true  
            },
            "dependsOn": [],
            "sku": {
                "Tier": "[parameters('botservicesku')]",
                "Name": "[parameters('botserviceskuname')]"
            }
        },
    {
        "type": "Microsoft.Web/sites",
        "name": "[concat(concat(parameters('deploymentName'),'discord'), uniqueString(resourceGroup().id))]",
        "apiVersion": "2018-11-01",
        "kind": "app,linux,container",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', concat( parameters('deploymentName'), uniqueString(resourceGroup().id) ))]",
            "[resourceId('Microsoft.Web/serverfarms', concat(concat(parameters('deploymentName'),'discord'), uniqueString(resourceGroup().id)))]"
            ],
         "properties": {
             "name": "[concat(concat(parameters('deploymentName'),'discord'), uniqueString(resourceGroup().id))]",
             "siteConfig": {
                 "alwaysOn": true,
                 "appCommandLine": "duckbot",
                 "linuxFxVersion": "[concat('DOCKER|', parameters('image'))]",
                 "appSettings": [
                     {
                         "name": "DOCKER_REGISTRY_SERVER_URL",
                         "value": "[parameters('dockerRegistryUrl')]"
                     },
                     {
                          "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                           "value": "false"
                     },
                     {
                           "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                           "value": "[parameters('dockerRegistryUsername')]"
                      },
                      
                      {
                            "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                            "value": "[parameters('dockerRegistryPassword')]"
                      },
                      {
                             "name": "DUCKBOT_STORAGEACCOUNT_NAME",
                             "value": "[concat( parameters('deploymentName'), uniqueString(resourceGroup().id) )]"
                      },   
                      {   
                             "name": "DUCKBOT_STORAGEACCOUNT_POINTTABLE",
                             "value": "points"
                      },   
                      {   
                             "name": "DUCKBOT_STORAGEACCOUNT_MEMBERTABLE",
                             "value": "member"
                      },   
                      {   
                             "name": "DUCKBOT_STORAGEACCOUNT_TOKEN",
                             "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', concat( parameters('deploymentName'), uniqueString(resourceGroup().id) )), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                      },   
                      {   
                             "name": "DUCKBOT_DISCORD_TOKEN",
                             "value": "[parameters('discordBotToken')]"
                      }                     
                 ]
             },
             "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', concat(concat(parameters('deploymentName'),'discord'), uniqueString(resourceGroup().id)) )]"
         }
    }
    ],
    "outputs": {
        "apiEndpoints": {
            "type": "array",
            "value": [
                {
                    "comments": "Might be able to use a function, enumerate DUCKBOT_STORAGEACCOUNT_NAME or DUCKBOT_STORAGEACCOUNT_POINTTABLE and get a list of 'guilds' to build a list for all or each tenant, currently these statically query WinAdmins",
                    "name": "TopMembers",
                    "value": "[uri(resourceId('Microsoft.Web/sites',concat(concat(parameters('deploymentName'),'discord'), uniqueString(resourceGroup().id))),'guild/618712310185197588/members')]"
                },
                {
                    "comments": "Might be able to use a function, enumerate DUCKBOT_STORAGEACCOUNT_NAME or DUCKBOT_STORAGEACCOUNT_POINTTABLE and get a list of 'guilds' to build a list for all or each tenant, currently these statically query WinAdmins",
                    "name": "TopThings",
                    "value": "[uri(resourceId('Microsoft.Web/sites',concat(concat(parameters('deploymentName'),'discord'), uniqueString(resourceGroup().id))),'guild/618712310185197588/members')]"
                }
            ]
        }
    }
  }
